start : program 	<Line: 1-38>
 program : program unit 	<Line: 1-38>
  program : unit 	<Line: 1-1>
   unit : var_declaration 	<Line: 1-1>
    var_declaration : type_specifier declaration_list SEMICOLON 	<Line: 1-1>
     type_specifier : INT 	<Line: 1-1>
      INT : int	<Line: 1>
     declaration_list : declaration_list COMMA ID 	<Line: 1-1>
      declaration_list : ID 	<Line: 1-1>
       ID : i	<Line: 1>
      COMMA : ,	<Line: 1>
      ID : j	<Line: 1>
     SEMICOLON : ;	<Line: 1>
  unit : func_definition 	<Line: 2-38>
   func_definition : type_specifier ID LPAREN RPAREN compound_statement 	<Line: 2-38>
    type_specifier : INT 	<Line: 2-2>
     INT : int	<Line: 2>
    ID : main	<Line: 2>
    LPAREN : (	<Line: 2>
    RPAREN : )	<Line: 2>
    compound_statement : LCURL statements RCURL 	<Line: 2-38>
     LCURL : {	<Line: 2>
     statements : statements statement 	<Line: 4-37>
      statements : statements statement 	<Line: 4-35>
       statements : statements statement 	<Line: 4-34>
        statements : statements statement 	<Line: 4-33>
         statements : statements statement 	<Line: 4-31>
          statements : statements statement 	<Line: 4-29>
           statements : statements statement 	<Line: 4-27>
            statements : statements statement 	<Line: 4-26>
             statements : statements statement 	<Line: 4-24>
              statements : statements statement 	<Line: 4-22>
               statements : statements statement 	<Line: 4-21>
                statements : statements statement 	<Line: 4-19>
                 statements : statements statement 	<Line: 4-18>
                  statements : statements statement 	<Line: 4-16>
                   statements : statements statement 	<Line: 4-14>
                    statements : statements statement 	<Line: 4-13>
                     statements : statements statement 	<Line: 4-11>
                      statements : statements statement 	<Line: 4-10>
                       statements : statements statement 	<Line: 4-9>
                        statements : statements statement 	<Line: 4-8>
                         statements : statements statement 	<Line: 4-7>
                          statements : statements statement 	<Line: 4-6>
                           statements : statement 	<Line: 4-4>
                            statement : var_declaration 	<Line: 4-4>
                             var_declaration : type_specifier declaration_list SEMICOLON 	<Line: 4-4>
                              type_specifier : INT 	<Line: 4-4>
                               INT : int	<Line: 4>
                              declaration_list : declaration_list COMMA ID 	<Line: 4-4>
                               declaration_list : declaration_list COMMA ID 	<Line: 4-4>
                                declaration_list : declaration_list COMMA ID 	<Line: 4-4>
                                 declaration_list : declaration_list COMMA ID 	<Line: 4-4>
                                  declaration_list : declaration_list COMMA ID 	<Line: 4-4>
                                   declaration_list : ID 	<Line: 4-4>
                                    ID : k	<Line: 4>
                                   COMMA : ,	<Line: 4>
                                   ID : ll	<Line: 4>
                                  COMMA : ,	<Line: 4>
                                  ID : m	<Line: 4>
                                 COMMA : ,	<Line: 4>
                                 ID : n	<Line: 4>
                                COMMA : ,	<Line: 4>
                                ID : o	<Line: 4>
                               COMMA : ,	<Line: 4>
                               ID : p	<Line: 4>
                              SEMICOLON : ;	<Line: 4>
                           statement : expression_statement 	<Line: 6-6>
                            expression_statement : expression SEMICOLON 	<Line: 6-6>
                             expression : variable ASSIGNOP logic_expression 	<Line: 6-6>
                              variable : ID 	<Line: 6-6>
                               ID : i	<Line: 6>
                              ASSIGNOP : =	<Line: 6>
                              logic_expression : rel_expression 	<Line: 6-6>
                               rel_expression : simple_expression 	<Line: 6-6>
                                simple_expression : term 	<Line: 6-6>
                                 term : unary_expression 	<Line: 6-6>
                                  unary_expression : factor 	<Line: 6-6>
                                   factor : CONST_INT 	<Line: 6-6>
                                    CONST_INT : 1	<Line: 6>
                             SEMICOLON : ;	<Line: 6>
                          statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 7-7>
                           PRINTLN : println	<Line: 7>
                           LPAREN : (	<Line: 7>
                           ID : i	<Line: 7>
                           RPAREN : )	<Line: 7>
                           SEMICOLON : ;	<Line: 7>
                         statement : expression_statement 	<Line: 8-8>
                          expression_statement : expression SEMICOLON 	<Line: 8-8>
                           expression : variable ASSIGNOP logic_expression 	<Line: 8-8>
                            variable : ID 	<Line: 8-8>
                             ID : j	<Line: 8>
                            ASSIGNOP : =	<Line: 8>
                            logic_expression : rel_expression 	<Line: 8-8>
                             rel_expression : simple_expression 	<Line: 8-8>
                              simple_expression : simple_expression ADDOP term 	<Line: 8-8>
                               simple_expression : term 	<Line: 8-8>
                                term : unary_expression 	<Line: 8-8>
                                 unary_expression : factor 	<Line: 8-8>
                                  factor : CONST_INT 	<Line: 8-8>
                                   CONST_INT : 5	<Line: 8>
                               ADDOP : +	<Line: 8>
                               term : unary_expression 	<Line: 8-8>
                                unary_expression : factor 	<Line: 8-8>
                                 factor : CONST_INT 	<Line: 8-8>
                                  CONST_INT : 8	<Line: 8>
                           SEMICOLON : ;	<Line: 8>
                        statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 9-9>
                         PRINTLN : println	<Line: 9>
                         LPAREN : (	<Line: 9>
                         ID : j	<Line: 9>
                         RPAREN : )	<Line: 9>
                         SEMICOLON : ;	<Line: 9>
                       statement : expression_statement 	<Line: 10-10>
                        expression_statement : expression SEMICOLON 	<Line: 10-10>
                         expression : variable ASSIGNOP logic_expression 	<Line: 10-10>
                          variable : ID 	<Line: 10-10>
                           ID : k	<Line: 10>
                          ASSIGNOP : =	<Line: 10>
                          logic_expression : rel_expression 	<Line: 10-10>
                           rel_expression : simple_expression 	<Line: 10-10>
                            simple_expression : simple_expression ADDOP term 	<Line: 10-10>
                             simple_expression : term 	<Line: 10-10>
                              term : unary_expression 	<Line: 10-10>
                               unary_expression : factor 	<Line: 10-10>
                                factor : variable 	<Line: 10-10>
                                 variable : ID 	<Line: 10-10>
                                  ID : i	<Line: 10>
                             ADDOP : +	<Line: 10>
                             term : term MULOP unary_expression 	<Line: 10-10>
                              term : unary_expression 	<Line: 10-10>
                               unary_expression : factor 	<Line: 10-10>
                                factor : CONST_INT 	<Line: 10-10>
                                 CONST_INT : 2	<Line: 10>
                              MULOP : *	<Line: 10>
                              unary_expression : factor 	<Line: 10-10>
                               factor : variable 	<Line: 10-10>
                                variable : ID 	<Line: 10-10>
                                 ID : j	<Line: 10>
                         SEMICOLON : ;	<Line: 10>
                      statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 11-11>
                       PRINTLN : println	<Line: 11>
                       LPAREN : (	<Line: 11>
                       ID : k	<Line: 11>
                       RPAREN : )	<Line: 11>
                       SEMICOLON : ;	<Line: 11>
                     statement : expression_statement 	<Line: 13-13>
                      expression_statement : expression SEMICOLON 	<Line: 13-13>
                       expression : variable ASSIGNOP logic_expression 	<Line: 13-13>
                        variable : ID 	<Line: 13-13>
                         ID : m	<Line: 13>
                        ASSIGNOP : =	<Line: 13>
                        logic_expression : rel_expression 	<Line: 13-13>
                         rel_expression : simple_expression 	<Line: 13-13>
                          simple_expression : term 	<Line: 13-13>
                           term : term MULOP unary_expression 	<Line: 13-13>
                            term : unary_expression 	<Line: 13-13>
                             unary_expression : factor 	<Line: 13-13>
                              factor : variable 	<Line: 13-13>
                               variable : ID 	<Line: 13-13>
                                ID : k	<Line: 13>
                            MULOP : %	<Line: 13>
                            unary_expression : factor 	<Line: 13-13>
                             factor : CONST_INT 	<Line: 13-13>
                              CONST_INT : 9	<Line: 13>
                       SEMICOLON : ;	<Line: 13>
                    statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 14-14>
                     PRINTLN : println	<Line: 14>
                     LPAREN : (	<Line: 14>
                     ID : m	<Line: 14>
                     RPAREN : )	<Line: 14>
                     SEMICOLON : ;	<Line: 14>
                   statement : expression_statement 	<Line: 16-16>
                    expression_statement : expression SEMICOLON 	<Line: 16-16>
                     expression : variable ASSIGNOP logic_expression 	<Line: 16-16>
                      variable : ID 	<Line: 16-16>
                       ID : p	<Line: 16>
                      ASSIGNOP : =	<Line: 16>
                      logic_expression : rel_expression 	<Line: 16-16>
                       rel_expression : simple_expression 	<Line: 16-16>
                        simple_expression : term 	<Line: 16-16>
                         term : unary_expression 	<Line: 16-16>
                          unary_expression : factor 	<Line: 16-16>
                           factor : CONST_INT 	<Line: 16-16>
                            CONST_INT : 1	<Line: 16>
                     SEMICOLON : ;	<Line: 16>
                  statement : expression_statement 	<Line: 18-18>
                   expression_statement : expression SEMICOLON 	<Line: 18-18>
                    expression : logic_expression 	<Line: 18-18>
                     logic_expression : rel_expression 	<Line: 18-18>
                      rel_expression : simple_expression 	<Line: 18-18>
                       simple_expression : term 	<Line: 18-18>
                        term : unary_expression 	<Line: 18-18>
                         unary_expression : factor 	<Line: 18-18>
                          factor : variable INCOP 	<Line: 18-18>
                           variable : ID 	<Line: 18-18>
                            ID : p	<Line: 18>
                           INCOP : ++	<Line: 18>
                    SEMICOLON : ;	<Line: 18>
                 statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 19-19>
                  PRINTLN : println	<Line: 19>
                  LPAREN : (	<Line: 19>
                  ID : p	<Line: 19>
                  RPAREN : )	<Line: 19>
                  SEMICOLON : ;	<Line: 19>
                statement : expression_statement 	<Line: 21-21>
                 expression_statement : expression SEMICOLON 	<Line: 21-21>
                  expression : variable ASSIGNOP logic_expression 	<Line: 21-21>
                   variable : ID 	<Line: 21-21>
                    ID : k	<Line: 21>
                   ASSIGNOP : =	<Line: 21>
                   logic_expression : rel_expression 	<Line: 21-21>
                    rel_expression : simple_expression 	<Line: 21-21>
                     simple_expression : term 	<Line: 21-21>
                      term : unary_expression 	<Line: 21-21>
                       unary_expression : ADDOP unary_expression 	<Line: 21-21>
                        ADDOP : -	<Line: 21>
                        unary_expression : factor 	<Line: 21-21>
                         factor : variable 	<Line: 21-21>
                          variable : ID 	<Line: 21-21>
                           ID : p	<Line: 21>
                  SEMICOLON : ;	<Line: 21>
               statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 22-22>
                PRINTLN : println	<Line: 22>
                LPAREN : (	<Line: 22>
                ID : k	<Line: 22>
                RPAREN : )	<Line: 22>
                SEMICOLON : ;	<Line: 22>
              statement : var_declaration 	<Line: 24-24>
               var_declaration : type_specifier declaration_list SEMICOLON 	<Line: 24-24>
                type_specifier : INT 	<Line: 24-24>
                 INT : int	<Line: 24>
                declaration_list : ID LSQUARE CONST_INT RSQUARE 	<Line: 24-24>
                 ID : a	<Line: 24>
                 LSQUARE : [	<Line: 24>
                 CONST_INT : 10	<Line: 24>
                 RSQUARE : ]	<Line: 24>
                SEMICOLON : ;	<Line: 24>
             statement : expression_statement 	<Line: 26-26>
              expression_statement : expression SEMICOLON 	<Line: 26-26>
               expression : variable ASSIGNOP logic_expression 	<Line: 26-26>
                variable : ID LSQUARE expression RSQUARE 	<Line: 26-26>
                 ID : a	<Line: 26>
                 LSQUARE : [	<Line: 26>
                 expression : logic_expression 	<Line: 26-26>
                  logic_expression : rel_expression 	<Line: 26-26>
                   rel_expression : simple_expression 	<Line: 26-26>
                    simple_expression : simple_expression ADDOP term 	<Line: 26-26>
                     simple_expression : simple_expression ADDOP term 	<Line: 26-26>
                      simple_expression : term 	<Line: 26-26>
                       term : unary_expression 	<Line: 26-26>
                        unary_expression : factor 	<Line: 26-26>
                         factor : CONST_INT 	<Line: 26-26>
                          CONST_INT : 1	<Line: 26>
                      ADDOP : +	<Line: 26>
                      term : unary_expression 	<Line: 26-26>
                       unary_expression : factor 	<Line: 26-26>
                        factor : CONST_INT 	<Line: 26-26>
                         CONST_INT : 2	<Line: 26>
                     ADDOP : -	<Line: 26>
                     term : unary_expression 	<Line: 26-26>
                      unary_expression : factor 	<Line: 26-26>
                       factor : CONST_INT 	<Line: 26-26>
                        CONST_INT : 3	<Line: 26>
                 RSQUARE : ]	<Line: 26>
                ASSIGNOP : =	<Line: 26>
                logic_expression : rel_expression 	<Line: 26-26>
                 rel_expression : simple_expression 	<Line: 26-26>
                  simple_expression : term 	<Line: 26-26>
                   term : unary_expression 	<Line: 26-26>
                    unary_expression : factor 	<Line: 26-26>
                     factor : CONST_INT 	<Line: 26-26>
                      CONST_INT : 3	<Line: 26>
               SEMICOLON : ;	<Line: 26>
            statement : PRINTLN LPAREN ID LSQUARE expression RSQUARE RPAREN SEMICOLON 	<Line: 27-27>
             PRINTLN : println	<Line: 27>
             LPAREN : (	<Line: 27>
             ID : a	<Line: 27>
             LSQUARE : [	<Line: 27>
             expression : logic_expression 	<Line: 27-27>
              logic_expression : rel_expression 	<Line: 27-27>
               rel_expression : simple_expression 	<Line: 27-27>
                simple_expression : simple_expression ADDOP term 	<Line: 27-27>
                 simple_expression : simple_expression ADDOP term 	<Line: 27-27>
                  simple_expression : term 	<Line: 27-27>
                   term : unary_expression 	<Line: 27-27>
                    unary_expression : factor 	<Line: 27-27>
                     factor : CONST_INT 	<Line: 27-27>
                      CONST_INT : 1	<Line: 27>
                  ADDOP : +	<Line: 27>
                  term : unary_expression 	<Line: 27-27>
                   unary_expression : factor 	<Line: 27-27>
                    factor : CONST_INT 	<Line: 27-27>
                     CONST_INT : 2	<Line: 27>
                 ADDOP : -	<Line: 27>
                 term : unary_expression 	<Line: 27-27>
                  unary_expression : factor 	<Line: 27-27>
                   factor : CONST_INT 	<Line: 27-27>
                    CONST_INT : 3	<Line: 27>
             RSQUARE : ]	<Line: 27>
             RPAREN : )	<Line: 27>
             SEMICOLON : ;	<Line: 27>
           statement : var_declaration 	<Line: 29-29>
            var_declaration : type_specifier declaration_list SEMICOLON 	<Line: 29-29>
             type_specifier : INT 	<Line: 29-29>
              INT : int	<Line: 29>
             declaration_list : ID LSQUARE CONST_INT RSQUARE 	<Line: 29-29>
              ID : b	<Line: 29>
              LSQUARE : [	<Line: 29>
              CONST_INT : 4	<Line: 29>
              RSQUARE : ]	<Line: 29>
             SEMICOLON : ;	<Line: 29>
          statement : expression_statement 	<Line: 31-31>
           expression_statement : expression SEMICOLON 	<Line: 31-31>
            expression : variable ASSIGNOP logic_expression 	<Line: 31-31>
             variable : ID LSQUARE expression RSQUARE 	<Line: 31-31>
              ID : b	<Line: 31>
              LSQUARE : [	<Line: 31>
              expression : logic_expression 	<Line: 31-31>
               logic_expression : rel_expression 	<Line: 31-31>
                rel_expression : simple_expression 	<Line: 31-31>
                 simple_expression : term 	<Line: 31-31>
                  term : unary_expression 	<Line: 31-31>
                   unary_expression : factor 	<Line: 31-31>
                    factor : CONST_INT 	<Line: 31-31>
                     CONST_INT : 0	<Line: 31>
              RSQUARE : ]	<Line: 31>
             ASSIGNOP : =	<Line: 31>
             logic_expression : rel_expression 	<Line: 31-31>
              rel_expression : simple_expression 	<Line: 31-31>
               simple_expression : term 	<Line: 31-31>
                term : unary_expression 	<Line: 31-31>
                 unary_expression : factor 	<Line: 31-31>
                  factor : CONST_INT 	<Line: 31-31>
                   CONST_INT : 1	<Line: 31>
            SEMICOLON : ;	<Line: 31>
         statement : expression_statement 	<Line: 33-33>
          expression_statement : expression SEMICOLON 	<Line: 33-33>
           expression : variable ASSIGNOP logic_expression 	<Line: 33-33>
            variable : ID LSQUARE expression RSQUARE 	<Line: 33-33>
             ID : a	<Line: 33>
             LSQUARE : [	<Line: 33>
             expression : logic_expression 	<Line: 33-33>
              logic_expression : rel_expression 	<Line: 33-33>
               rel_expression : simple_expression 	<Line: 33-33>
                simple_expression : term 	<Line: 33-33>
                 term : unary_expression 	<Line: 33-33>
                  unary_expression : factor 	<Line: 33-33>
                   factor : CONST_INT 	<Line: 33-33>
                    CONST_INT : 3	<Line: 33>
             RSQUARE : ]	<Line: 33>
            ASSIGNOP : =	<Line: 33>
            logic_expression : rel_expression 	<Line: 33-33>
             rel_expression : simple_expression 	<Line: 33-33>
              simple_expression : term 	<Line: 33-33>
               term : unary_expression 	<Line: 33-33>
                unary_expression : factor 	<Line: 33-33>
                 factor : variable 	<Line: 33-33>
                  variable : ID LSQUARE expression RSQUARE 	<Line: 33-33>
                   ID : b	<Line: 33>
                   LSQUARE : [	<Line: 33>
                   expression : logic_expression 	<Line: 33-33>
                    logic_expression : rel_expression 	<Line: 33-33>
                     rel_expression : simple_expression 	<Line: 33-33>
                      simple_expression : term 	<Line: 33-33>
                       term : unary_expression 	<Line: 33-33>
                        unary_expression : factor 	<Line: 33-33>
                         factor : CONST_INT 	<Line: 33-33>
                          CONST_INT : 0	<Line: 33>
                   RSQUARE : ]	<Line: 33>
           SEMICOLON : ;	<Line: 33>
        statement : PRINTLN LPAREN ID LSQUARE expression RSQUARE RPAREN SEMICOLON 	<Line: 34-34>
         PRINTLN : println	<Line: 34>
         LPAREN : (	<Line: 34>
         ID : a	<Line: 34>
         LSQUARE : [	<Line: 34>
         expression : logic_expression 	<Line: 34-34>
          logic_expression : rel_expression 	<Line: 34-34>
           rel_expression : simple_expression 	<Line: 34-34>
            simple_expression : term 	<Line: 34-34>
             term : unary_expression 	<Line: 34-34>
              unary_expression : factor 	<Line: 34-34>
               factor : CONST_INT 	<Line: 34-34>
                CONST_INT : 3	<Line: 34>
         RSQUARE : ]	<Line: 34>
         RPAREN : )	<Line: 34>
         SEMICOLON : ;	<Line: 34>
       statement : PRINTLN LPAREN ID LSQUARE expression RSQUARE RPAREN SEMICOLON 	<Line: 35-35>
        PRINTLN : println	<Line: 35>
        LPAREN : (	<Line: 35>
        ID : b	<Line: 35>
        LSQUARE : [	<Line: 35>
        expression : logic_expression 	<Line: 35-35>
         logic_expression : rel_expression 	<Line: 35-35>
          rel_expression : simple_expression 	<Line: 35-35>
           simple_expression : term 	<Line: 35-35>
            term : unary_expression 	<Line: 35-35>
             unary_expression : factor 	<Line: 35-35>
              factor : CONST_INT 	<Line: 35-35>
               CONST_INT : 0	<Line: 35>
        RSQUARE : ]	<Line: 35>
        RPAREN : )	<Line: 35>
        SEMICOLON : ;	<Line: 35>
      statement : RETURN expression SEMICOLON 	<Line: 37-37>
       RETURN : return	<Line: 37>
       expression : logic_expression 	<Line: 37-37>
        logic_expression : rel_expression 	<Line: 37-37>
         rel_expression : simple_expression 	<Line: 37-37>
          simple_expression : term 	<Line: 37-37>
           term : unary_expression 	<Line: 37-37>
            unary_expression : factor 	<Line: 37-37>
             factor : CONST_INT 	<Line: 37-37>
              CONST_INT : 0	<Line: 37>
       SEMICOLON : ;	<Line: 37>
     RCURL : }	<Line: 38>
